import * as tslib_1 from "tslib";
import { ReplaySubject } from 'rxjs';
import { distinctUntilChanged } from 'rxjs/operators';
/** @hidden */
var MockObservableStore = /** @class */ (function () {
    function MockObservableStore() {
        var _this = this;
        this.selections = {};
        this.subStores = {};
        this.getSelectorStub = function (selector, comparator) {
            return _this.initSelectorStub(selector, comparator).subject;
        };
        this.reset = function () {
            Object.keys(_this.subStores).forEach(function (k) { return _this.subStores[k].reset(); });
            _this.selections = {};
            _this.subStores = {};
        };
        this.dispatch = function (action) { return action; };
        this.replaceReducer = function () { return null; };
        this.getState = function () { return ({}); };
        this.subscribe = function () { return function () { return null; }; };
        this.select = function (selector, comparator) {
            var stub = _this.initSelectorStub(selector, comparator);
            return stub.comparator
                ? stub.subject.pipe(distinctUntilChanged(stub.comparator))
                : stub.subject;
        };
        this.configureSubStore = function (basePath, _) { return _this.initSubStore(basePath); };
        this.getSubStore = function () {
            var _a;
            var pathSelectors = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                pathSelectors[_i] = arguments[_i];
            }
            var _b = tslib_1.__read(pathSelectors), first = _b[0], rest = _b.slice(1);
            return (first
                ? (_a = _this.initSubStore(first)).getSubStore.apply(_a, tslib_1.__spread(rest)) : _this);
        };
    }
    MockObservableStore.prototype.initSubStore = function (basePath) {
        var result = this.subStores[JSON.stringify(basePath)] ||
            new MockObservableStore();
        this.subStores[JSON.stringify(basePath)] = result;
        return result;
    };
    MockObservableStore.prototype.initSelectorStub = function (selector, comparator) {
        var key = selector ? selector.toString() : '';
        var record = this.selections[key] || {
            subject: new ReplaySubject(),
            comparator: comparator,
        };
        this.selections[key] = record;
        return record;
    };
    return MockObservableStore;
}());
export { MockObservableStore };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JzZXJ2YWJsZS1zdG9yZS5tb2NrLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFuZ3VsYXItcmVkdXgvc3RvcmUvdGVzdGluZy8iLCJzb3VyY2VzIjpbIm9ic2VydmFibGUtc3RvcmUubW9jay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBSUEsT0FBTyxFQUFjLGFBQWEsRUFBVyxNQUFNLE1BQU0sQ0FBQztBQUMxRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQWtCdEQsY0FBYztBQUNkO0lBQUE7UUFBQSxpQkFrRUM7UUFqRUMsZUFBVSxHQUFvQixFQUFFLENBQUM7UUFDakMsY0FBUyxHQUFvQixFQUFFLENBQUM7UUFFaEMsb0JBQWUsR0FBRyxVQUNoQixRQUF5QyxFQUN6QyxVQUF1QjtZQUV2QixPQUFBLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBZ0IsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDLE9BQU87UUFBbEUsQ0FBa0UsQ0FBQztRQUVyRSxVQUFLLEdBQUc7WUFDTixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxLQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUF6QixDQUF5QixDQUFDLENBQUM7WUFDcEUsS0FBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7WUFDckIsS0FBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7UUFDdEIsQ0FBQyxDQUFDO1FBRUYsYUFBUSxHQUF3QixVQUFBLE1BQU0sSUFBSSxPQUFBLE1BQU0sRUFBTixDQUFNLENBQUM7UUFDakQsbUJBQWMsR0FBRyxjQUFNLE9BQUEsSUFBSSxFQUFKLENBQUksQ0FBQztRQUM1QixhQUFRLEdBQUcsY0FBTSxPQUFBLENBQUMsRUFBRSxDQUFDLEVBQUosQ0FBSSxDQUFDO1FBQ3RCLGNBQVMsR0FBRyxjQUFNLE9BQUEsY0FBTSxPQUFBLElBQUksRUFBSixDQUFJLEVBQVYsQ0FBVSxDQUFDO1FBRTdCLFdBQU0sR0FBRyxVQUNQLFFBQXVDLEVBQ3ZDLFVBQXVCO1lBRXZCLElBQU0sSUFBSSxHQUFHLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBZ0IsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQ3hFLE9BQU8sSUFBSSxDQUFDLFVBQVU7Z0JBQ3BCLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQzFELENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ25CLENBQUMsQ0FBQztRQUVGLHNCQUFpQixHQUFHLFVBQ2xCLFFBQXNCLEVBQ3RCLENBQStCLElBQ0csT0FBQSxLQUFJLENBQUMsWUFBWSxDQUFXLFFBQVEsQ0FBQyxFQUFyQyxDQUFxQyxDQUFDO1FBRTFFLGdCQUFXLEdBQUc7O1lBQ1osdUJBQWdDO2lCQUFoQyxVQUFnQyxFQUFoQyxxQkFBZ0MsRUFBaEMsSUFBZ0M7Z0JBQWhDLGtDQUFnQzs7WUFFMUIsSUFBQSxrQ0FBZ0MsRUFBL0IsYUFBSyxFQUFFLGtCQUF3QixDQUFDO1lBQ3ZDLE9BQU8sQ0FBQyxLQUFLO2dCQUNYLENBQUMsQ0FBQyxDQUFBLEtBQUEsS0FBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQSxDQUFDLFdBQVcsNEJBQUksSUFBSSxHQUM5QyxDQUFDLENBQUMsS0FBSSxDQUFrQyxDQUFDO1FBQzdDLENBQUMsQ0FBQztJQXVCSixDQUFDO0lBckJTLDBDQUFZLEdBQXBCLFVBQStCLFFBQXNCO1FBQ25ELElBQU0sTUFBTSxHQUNWLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN4QyxJQUFJLG1CQUFtQixFQUFZLENBQUM7UUFDdEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQ2xELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFTyw4Q0FBZ0IsR0FBeEIsVUFDRSxRQUF5QyxFQUN6QyxVQUF1QjtRQUV2QixJQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ2hELElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUk7WUFDckMsT0FBTyxFQUFFLElBQUksYUFBYSxFQUFpQjtZQUMzQyxVQUFVLFlBQUE7U0FDWCxDQUFDO1FBRUYsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUM7UUFDOUIsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUNILDBCQUFDO0FBQUQsQ0FBQyxBQWxFRCxJQWtFQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRPRE86IFNlZSBpZiB0aGlzIGxpbnRpbmcgcnVsZSBjYW4gYmUgZW5hYmxlZCB3aXRoIG5ldyBidWlsZCBwcm9jZXNzIChuZy1wYWNrYWdyKVxuLy8gdHNsaW50OmRpc2FibGU6bm8taW1wbGljaXQtZGVwZW5kZW5jaWVzXG5pbXBvcnQgeyBDb21wYXJhdG9yLCBQYXRoU2VsZWN0b3IsIFNlbGVjdG9yIH0gZnJvbSAnQGFuZ3VsYXItcmVkdXgvc3RvcmUnO1xuaW1wb3J0IHsgQW55QWN0aW9uLCBEaXNwYXRjaCwgUmVkdWNlciB9IGZyb20gJ3JlZHV4JztcbmltcG9ydCB7IE9ic2VydmFibGUsIFJlcGxheVN1YmplY3QsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRpc3RpbmN0VW50aWxDaGFuZ2VkIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG4vKiogQGhpZGRlbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTZWxlY3RvclN0dWJSZWNvcmQge1xuICBzdWJqZWN0OiBTdWJqZWN0PGFueT47XG4gIGNvbXBhcmF0b3I6IENvbXBhcmF0b3I7XG59XG5cbi8qKiBAaGlkZGVuICovXG5leHBvcnQgaW50ZXJmYWNlIFNlbGVjdG9yU3R1Yk1hcCB7XG4gIFtzZWxlY3Rvcjogc3RyaW5nXTogU2VsZWN0b3JTdHViUmVjb3JkO1xufVxuXG4vKiogQGhpZGRlbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTdWJTdG9yZVN0dWJNYXAge1xuICBbYmFzZVBhdGg6IHN0cmluZ106IE1vY2tPYnNlcnZhYmxlU3RvcmU8YW55Pjtcbn1cblxuLyoqIEBoaWRkZW4gKi9cbmV4cG9ydCBjbGFzcyBNb2NrT2JzZXJ2YWJsZVN0b3JlPFN0YXRlPiB7XG4gIHNlbGVjdGlvbnM6IFNlbGVjdG9yU3R1Yk1hcCA9IHt9O1xuICBzdWJTdG9yZXM6IFN1YlN0b3JlU3R1Yk1hcCA9IHt9O1xuXG4gIGdldFNlbGVjdG9yU3R1YiA9IDxTZWxlY3RlZFN0YXRlPihcbiAgICBzZWxlY3Rvcj86IFNlbGVjdG9yPFN0YXRlLCBTZWxlY3RlZFN0YXRlPixcbiAgICBjb21wYXJhdG9yPzogQ29tcGFyYXRvcixcbiAgKTogU3ViamVjdDxTZWxlY3RlZFN0YXRlPiA9PlxuICAgIHRoaXMuaW5pdFNlbGVjdG9yU3R1YjxTZWxlY3RlZFN0YXRlPihzZWxlY3RvciwgY29tcGFyYXRvcikuc3ViamVjdDtcblxuICByZXNldCA9ICgpID0+IHtcbiAgICBPYmplY3Qua2V5cyh0aGlzLnN1YlN0b3JlcykuZm9yRWFjaChrID0+IHRoaXMuc3ViU3RvcmVzW2tdLnJlc2V0KCkpO1xuICAgIHRoaXMuc2VsZWN0aW9ucyA9IHt9O1xuICAgIHRoaXMuc3ViU3RvcmVzID0ge307XG4gIH07XG5cbiAgZGlzcGF0Y2g6IERpc3BhdGNoPEFueUFjdGlvbj4gPSBhY3Rpb24gPT4gYWN0aW9uO1xuICByZXBsYWNlUmVkdWNlciA9ICgpID0+IG51bGw7XG4gIGdldFN0YXRlID0gKCkgPT4gKHt9KTtcbiAgc3Vic2NyaWJlID0gKCkgPT4gKCkgPT4gbnVsbDtcblxuICBzZWxlY3QgPSA8U2VsZWN0ZWRTdGF0ZT4oXG4gICAgc2VsZWN0b3I/OiBTZWxlY3RvcjxhbnksIFNlbGVjdGVkU3RhdGU+LFxuICAgIGNvbXBhcmF0b3I/OiBDb21wYXJhdG9yLFxuICApOiBPYnNlcnZhYmxlPGFueT4gPT4ge1xuICAgIGNvbnN0IHN0dWIgPSB0aGlzLmluaXRTZWxlY3RvclN0dWI8U2VsZWN0ZWRTdGF0ZT4oc2VsZWN0b3IsIGNvbXBhcmF0b3IpO1xuICAgIHJldHVybiBzdHViLmNvbXBhcmF0b3JcbiAgICAgID8gc3R1Yi5zdWJqZWN0LnBpcGUoZGlzdGluY3RVbnRpbENoYW5nZWQoc3R1Yi5jb21wYXJhdG9yKSlcbiAgICAgIDogc3R1Yi5zdWJqZWN0O1xuICB9O1xuXG4gIGNvbmZpZ3VyZVN1YlN0b3JlID0gPFN1YlN0YXRlPihcbiAgICBiYXNlUGF0aDogUGF0aFNlbGVjdG9yLFxuICAgIF86IFJlZHVjZXI8U3ViU3RhdGUsIEFueUFjdGlvbj4sXG4gICk6IE1vY2tPYnNlcnZhYmxlU3RvcmU8U3ViU3RhdGU+ID0+IHRoaXMuaW5pdFN1YlN0b3JlPFN1YlN0YXRlPihiYXNlUGF0aCk7XG5cbiAgZ2V0U3ViU3RvcmUgPSA8U3ViU3RhdGU+KFxuICAgIC4uLnBhdGhTZWxlY3RvcnM6IFBhdGhTZWxlY3RvcltdXG4gICk6IE1vY2tPYnNlcnZhYmxlU3RvcmU8YW55PiA9PiB7XG4gICAgY29uc3QgW2ZpcnN0LCAuLi5yZXN0XSA9IHBhdGhTZWxlY3RvcnM7XG4gICAgcmV0dXJuIChmaXJzdFxuICAgICAgPyB0aGlzLmluaXRTdWJTdG9yZShmaXJzdCkuZ2V0U3ViU3RvcmUoLi4ucmVzdClcbiAgICAgIDogdGhpcykgYXMgTW9ja09ic2VydmFibGVTdG9yZTxTdWJTdGF0ZT47XG4gIH07XG5cbiAgcHJpdmF0ZSBpbml0U3ViU3RvcmU8U3ViU3RhdGU+KGJhc2VQYXRoOiBQYXRoU2VsZWN0b3IpIHtcbiAgICBjb25zdCByZXN1bHQgPVxuICAgICAgdGhpcy5zdWJTdG9yZXNbSlNPTi5zdHJpbmdpZnkoYmFzZVBhdGgpXSB8fFxuICAgICAgbmV3IE1vY2tPYnNlcnZhYmxlU3RvcmU8U3ViU3RhdGU+KCk7XG4gICAgdGhpcy5zdWJTdG9yZXNbSlNPTi5zdHJpbmdpZnkoYmFzZVBhdGgpXSA9IHJlc3VsdDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0U2VsZWN0b3JTdHViPFNlbGVjdGVkU3RhdGU+KFxuICAgIHNlbGVjdG9yPzogU2VsZWN0b3I8U3RhdGUsIFNlbGVjdGVkU3RhdGU+LFxuICAgIGNvbXBhcmF0b3I/OiBDb21wYXJhdG9yLFxuICApOiBTZWxlY3RvclN0dWJSZWNvcmQge1xuICAgIGNvbnN0IGtleSA9IHNlbGVjdG9yID8gc2VsZWN0b3IudG9TdHJpbmcoKSA6ICcnO1xuICAgIGNvbnN0IHJlY29yZCA9IHRoaXMuc2VsZWN0aW9uc1trZXldIHx8IHtcbiAgICAgIHN1YmplY3Q6IG5ldyBSZXBsYXlTdWJqZWN0PFNlbGVjdGVkU3RhdGU+KCksXG4gICAgICBjb21wYXJhdG9yLFxuICAgIH07XG5cbiAgICB0aGlzLnNlbGVjdGlvbnNba2V5XSA9IHJlY29yZDtcbiAgICByZXR1cm4gcmVjb3JkO1xuICB9XG59XG4iXX0=